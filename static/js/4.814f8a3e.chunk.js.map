{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Dialogs.js","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.js"],"names":["module","exports","DialogsItem","props","className","classes","person","active","to","id","name","Message","message","maxLength20","maxLength","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","type","Dialogs","dialogs","map","el","key","messages","container","dataForm","click","textarea","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogPage","DialogsData","MessageData","dispatch","data","clickActionCreator","Components","RedirectComponent","this","Component"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,UAAY,2BAA2B,QAAU,yBAAyB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,OAAS,0B,iICOxMC,EAAc,SAACC,GACjB,OACI,yBAAKC,UAAS,UAAKC,IAAQC,OAAb,YAAuBD,IAAQE,SACzC,kBAAC,IAAD,CAASC,GAAI,YAAcL,EAAMM,IAAKN,EAAMO,QAKlDC,EAAU,SAACR,GACb,OACI,yBAAKC,UAAWC,IAAQO,SAAUT,EAAMS,UA0B5CC,EAAcC,YAAU,IAWxBC,EAAmBC,YAAU,CAACC,KAAM,WAAjBD,EATH,SAACb,GACjB,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BAAK,kBAACC,EAAA,EAAD,CAAOC,YAAY,qBAAqBX,KAAM,WAAYY,UAAWC,IAAUC,SAAU,CAACC,IAAUZ,MACzG,6BAAK,2BAAOa,KAAK,gBAQdC,EApCC,SAACxB,GAEb,IAAMyB,EAAUzB,EAAMyB,QAAQC,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAarB,GAAIqB,EAAGrB,GAAIsB,IAAKD,EAAGrB,GAAIC,KAAMoB,EAAGpB,UAC/EsB,EAAW7B,EAAM6B,SAASH,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAASlB,QAASkB,EAAGlB,QAASmB,IAAKD,EAAGrB,QAMhF,OACI,yBAAKL,UAAWC,IAAQ4B,WACpB,yBAAK7B,UAAWC,IAAQuB,SACnBA,GAEL,yBAAKxB,UAAWC,IAAQ2B,UACnBA,EACD,kBAACjB,EAAD,CAAkBG,SAXb,SAACgB,GACd/B,EAAMgC,MAAMD,EAASE,gB,wDCvBzBC,EAA6B,SAAAC,GAC7B,MAAO,CACHC,OAAQD,EAAME,KAAKD,S,OCgBZE,sBAAQC,aAjBD,SAACJ,GACnB,MAAO,CACHV,QAASU,EAAMK,WAAWC,YAC1BZ,SAAUM,EAAMK,WAAWE,gBAIV,SAACC,GACtB,MAAO,CACHX,MADG,SACGY,GACFD,EAASE,YAAmBD,UDLR,SAAAE,GAAe,IAErCC,EAFoC,iLAKlC,OAAKC,KAAKhD,MAAMoC,OAGZ,kBAACU,EAAeE,KAAKhD,OAHM,kBAAC,IAAD,CAAUK,GAAG,eALV,GAEV4C,aAahC,OAFmCV,YAAQL,EAARK,CAAoCQ,KCD5DT,CAAuEd","file":"static/js/4.814f8a3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dialogs_container__2p0uA\",\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"person\":\"Dialogs_person__2BpLA\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\",\"active\":\"Dialogs_active__2sQhs\"};","import React from 'react';\nimport classes from './Dialogs.module.css';\nimport { NavLink } from 'react-router-dom';\nimport { Field, reduxForm } from 'redux-form';\nimport { Textarea } from '../common/formsControl/FormsControl';\nimport { required, maxLength } from '../../utilits/validators/validators';\n\n\nconst DialogsItem = (props) => {\n    return (\n        <div className={`${classes.person} ${classes.active}`}>\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nconst Message = (props) => {\n    return (\n        <div className={classes.message}>{props.message}</div>\n    )\n}\n\nconst Dialogs = (props) => {\n\n    const dialogs = props.dialogs.map(el => <DialogsItem id={el.id} key={el.id} name={el.name} />);\n    const messages = props.messages.map(el => <Message message={el.message} key={el.id} />);\n\n    const onSubmit = (dataForm) => {\n        props.click(dataForm.textarea)\n    }\n\n    return (\n        <div className={classes.container}>\n            <div className={classes.dialogs}>\n                {dialogs}\n            </div>\n            <div className={classes.messages}>\n                {messages}\n                <DialogsReduxForm onSubmit={onSubmit} />\n            </div>\n        </div>\n    )\n}\n\nlet maxLength20 = maxLength(20);\n\nconst DialogsForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div><Field placeholder='Enter your message' name={'textarea'} component={Textarea} validate={[required, maxLength20]}/></div>\n            <div><input type='submit'/></div>\n        </form>\n    )\n}\n\nlet DialogsReduxForm = reduxForm({form: 'dialogs'})(DialogsForm)\n\n\nexport default Dialogs;\n\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\n\nlet mapStateToPropsForRedirect = state => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport const withAuthRedirect = Components => {\n\n    class RedirectComponent extends Component {\n        render() {\n\n            if (!this.props.isAuth) return <Redirect to='/login' />\n\n            return (\n                <Components {...this.props} />\n            )\n        }\n    }\n\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectAuthRedirectComponent\n\n}","import { textUpdateActionCreator, clickActionCreator } from '../../redux/dialogs-reducer';\nimport Dialogs from './Dialogs';\nimport { connect } from 'react-redux';\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\nimport { compose } from 'redux';\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogs: state.dialogPage.DialogsData,\n        messages: state.dialogPage.MessageData,\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        click(data){\n            dispatch(clickActionCreator(data))\n        },\n    }\n}\n\n\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect)(Dialogs)\n\n\n"],"sourceRoot":""}